{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masat\\\\mlm-system\\\\src\\\\components\\\\Auth\\\\AdminRoute.js\",\n  _s = $RefreshSig$();\n// src/components/Auth/AdminRoute.js\nimport { Navigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../../utils/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    checkAdmin();\n  }, []);\n  const checkAdmin = async () => {\n    try {\n      // 現在のセッションを取得\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (!session) {\n        setLoading(false);\n        return;\n      }\n\n      // プロフィールから管理者権限をチェック\n      const {\n        data: profile,\n        error\n      } = await supabase.from('profiles').select('user_type').eq('id', session.user.id).single();\n      if (error) throw error;\n      setIsAdmin(profile.user_type === 'admin');\n    } catch (error) {\n      console.error('Admin check error:', error.message);\n      setIsAdmin(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ローディング中\n  if (loading) {\n    return null; // またはローディングスピナーを表示\n  }\n\n  // 管理者でない場合はトップページにリダイレクト\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 管理者の場合は子コンポーネントを表示\n  return children;\n};\n_s(AdminRoute, \"xVTL6OGf1Dz1Fb1+C9WwZBdUN00=\");\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["Navigate","useEffect","useState","supabase","jsxDEV","_jsxDEV","AdminRoute","children","_s","loading","setLoading","isAdmin","setIsAdmin","checkAdmin","data","session","auth","getSession","profile","error","from","select","eq","user","id","single","user_type","console","message","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/masat/mlm-system/src/components/Auth/AdminRoute.js"],"sourcesContent":["// src/components/Auth/AdminRoute.js\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport { supabase } from '../../utils/supabaseClient';\r\n\r\nconst AdminRoute = ({ children }) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        checkAdmin();\r\n    }, []);\r\n\r\n    const checkAdmin = async () => {\r\n        try {\r\n            // 現在のセッションを取得\r\n            const { data: { session } } = await supabase.auth.getSession();\r\n\r\n            if (!session) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // プロフィールから管理者権限をチェック\r\n            const { data: profile, error } = await supabase\r\n                .from('profiles')\r\n                .select('user_type')\r\n                .eq('id', session.user.id)\r\n                .single();\r\n\r\n            if (error) throw error;\r\n\r\n            setIsAdmin(profile.user_type === 'admin');\r\n        } catch (error) {\r\n            console.error('Admin check error:', error.message);\r\n            setIsAdmin(false);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // ローディング中\r\n    if (loading) {\r\n        return null; // またはローディングスピナーを表示\r\n    }\r\n\r\n    // 管理者でない場合はトップページにリダイレクト\r\n    if (!isAdmin) {\r\n        return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    // 管理者の場合は子コンポーネントを表示\r\n    return children;\r\n};\r\n\r\nexport default AdminRoute;\r\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACZY,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA;MACA,MAAM;QAAEC,IAAI,EAAE;UAAEC;QAAQ;MAAE,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACC,UAAU,CAAC,CAAC;MAE9D,IAAI,CAACF,OAAO,EAAE;QACVL,UAAU,CAAC,KAAK,CAAC;QACjB;MACJ;;MAEA;MACA,MAAM;QAAEI,IAAI,EAAEI,OAAO;QAAEC;MAAM,CAAC,GAAG,MAAMhB,QAAQ,CAC1CiB,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,WAAW,CAAC,CACnBC,EAAE,CAAC,IAAI,EAAEP,OAAO,CAACQ,IAAI,CAACC,EAAE,CAAC,CACzBC,MAAM,CAAC,CAAC;MAEb,IAAIN,KAAK,EAAE,MAAMA,KAAK;MAEtBP,UAAU,CAACM,OAAO,CAACQ,SAAS,KAAK,OAAO,CAAC;IAC7C,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZQ,OAAO,CAACR,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACS,OAAO,CAAC;MAClDhB,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,IAAID,OAAO,EAAE;IACT,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA;EACA,IAAI,CAACE,OAAO,EAAE;IACV,oBAAON,OAAA,CAACL,QAAQ;MAAC6B,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtC;;EAEA;EACA,OAAO3B,QAAQ;AACnB,CAAC;AAACC,EAAA,CAhDIF,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAkDhB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}